import Replicate from 'replicate';
import { OnboardingInput } from '../../shared/schema';
import { ContentGenerationResponse } from '../../shared/schema';
import { AIChatRequest, AIChatResponse } from './aiChat';

const replicate = new Replicate({
  auth: process.env.REPLICATE_API_TOKEN || '',
});

export async function generateMultiPlatformContent(
  preferences: OnboardingInput
): Promise<ContentGenerationResponse> {
  // Replicate doesn't do text generation as well as dedicated text models
  // This is primarily for image generation, so we'll return empty response
  const response: ContentGenerationResponse = {};
  return response;
}

export async function generateChatResponse(
  request: AIChatRequest
): Promise<AIChatResponse> {
  // Replicate doesn't do text generation as well as dedicated text models
  // This is primarily for image generation, so we'll return empty response
  throw new Error('Replicate service is for image generation only');
}

export async function generateImage(prompt: string): Promise<string | null> {
  console.log('üé® Generating image with Replicate SDXL...');
  console.log('üéØ Input prompt:', prompt.substring(0, 100) + '...');

  if (!process.env.REPLICATE_API_TOKEN) {
    console.warn('‚ö†Ô∏è Replicate API token not configured');
    return null;
  }

  try {
    // Clean and enhance the prompt for better SDXL results
    let cleanPrompt = prompt.trim();
    
    // Remove any problematic content but preserve meaning
    cleanPrompt = cleanPrompt.replace(/\*\*/g, '').replace(/[#@]/g, '').trim();
    
    // Enhance for SDXL - it works better with descriptive prompts
    if (cleanPrompt.length < 30) {
      cleanPrompt = `Professional, high-quality photograph: ${cleanPrompt}. Sharp focus, vibrant colors, suitable for social media.`;
    }

    console.log('üîß Enhanced SDXL prompt:', cleanPrompt.substring(0, 120) + '...');

    // Use SDXL for high-quality image generation
    const output = await replicate.run(
      "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
      {
        input: {
          prompt: cleanPrompt,
          width: 1024,
          height: 1024,
          num_outputs: 1,
          scheduler: "K_EULER",
          num_inference_steps: 20,
          guidance_scale: 7.5,
          prompt_strength: 0.8,
          refine: "expert_ensemble_refiner",
          high_noise_frac: 0.8,
          apply_watermark: false,
        }
      }
    );

    if (!output || !Array.isArray(output) || output.length === 0) {
      console.error('‚ùå No image generated by Replicate SDXL');
      return null;
    }

    const imageUrl = output[0] as string;
    console.log('‚úÖ Replicate SDXL image generated successfully');
    return imageUrl;

  } catch (error: any) {
    console.error('‚ùå Error generating image with Replicate SDXL:', error);
    
    // Handle specific Replicate errors
    if (error.message?.includes('authentication')) {
      throw new Error('Replicate API token is invalid or expired. Please check your configuration.');
    } else if (error.message?.includes('rate limit')) {
      throw new Error('Rate limit exceeded. Please wait a moment and try again.');
    } else if (error.message?.includes('content policy')) {
      throw new Error('Content policy violation. Please try a different description.');
    } else {
      throw new Error(`Replicate SDXL image generation failed: ${error.message || 'Unknown error'}`);
    }
  }
}

export async function testReplicateConnection(): Promise<boolean> {
  try {
    if (!process.env.REPLICATE_API_TOKEN) {
      console.warn('‚ö†Ô∏è Replicate API token not configured');
      return false;
    }

    // Test with a simple prompt
    const result = await generateImage('A simple test image');
    return result !== null;
  } catch (error) {
    console.error('‚ùå Replicate connection test failed:', error);
    return false;
  }
}